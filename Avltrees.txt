#include<iostream> 
using namespace std; 
  
class Node  
{  
    public: 
    int key;  
    Node *left;  
    Node *right;  
    int h; 
};
int h(Node *N)  
{  
    if (N == NULL)  
        return 0;  
    return N->h;  

}  
  int max(int a, int b)  
{  
    return (a > b)? a : b;  
}  
  Node* newNode(int key)  
{  
    Node* node = new Node(); 
    node->key = key;  
    node->left = NULL;  
    node->right = NULL;  
    node->h = 1;  
                     
    return(node);  
}  
  
Node *rightrotate(Node *y)  
{  
    Node *x = y->left;  
    Node *T2 = x->right;   
    x->right = y;  
    y->left = T2;  
  
    y->h = max(h(y->left),h(y->right)) + 1;  
    x->h = max(h(x->left),h(x->right)) + 1;  
   
    return x;  
}  
    
Node *leftrotate(Node *x)  
{  
    Node *y = x->right;  
    Node *T2 = y->left;   
    y->left = x;  
    x->right = T2;  

    x->h = max(h(x->left),h(x->right)) + 1;  
    y->h = max(h(y->left),h(y->right)) + 1;  
  
    return y;  
}  
  int getBalance(Node *N)  
{  
    if (N == NULL)  
        return 0;  
    return h(N->left) - h(N->right);  
}  
  Node* insert(Node* node, int key)  
{  
    if (node == NULL)  
        return(newNode(key));  
  
    if (key < node->key)  
        node->left = insert(node->left, key);  
    else if (key > node->key)  
        node->right = insert(node->right, key);  
    else 
        return node;  
  
    node->h = 1 + max(h(node->left),h(node->right));  
  
    int balance = getBalance(node);  
    
    if (balance > 1 && key < node->left->key)  
        return rightrotate(node);  
   
    if (balance < -1 && key > node->right->key)  
        return leftrotate(node);  
   
    if (balance > 1 && key > node->left->key)  
    {  
        node->left = leftrotate(node->left);  
        return rightrotate(node);  
    }  
  
 
    if (balance < -1 && key < node->right->key)  
    {  
        node->right = rightrotate(node->right);  
        return leftrotate(node);  
    }  
  
    return node;  
}  
Node * minValueNode(Node* node)  
{  
    Node* current = node;  
    while (current->left != NULL)  
        current = current->left;  
  
    return current;  
}  

Node* deleteNode(Node* root, int key)  
{    
    if (root == NULL)  
        return root;    
    if ( key < root->key )  
        root->left = deleteNode(root->left, key);    
    else if( key > root->key )  
        root->right = deleteNode(root->right, key);   
    else
    {  
        if( (root->left == NULL) ||  (root->right == NULL) )  
        {  
            Node *temp = root->left?root->left:root->right;  
            if (temp == NULL)  
            {  
                temp = root;  
                root = NULL;  
            }  
            else   
            *root = *temp;  
             delete(temp);  
        }  
        else
        {    
            Node* temp = minValueNode(root->right);
            root->key = temp->key;    
            root->right = deleteNode(root->right,temp->key);  
        }  
    }    
    if (root == NULL)  
    return root;  
    root->h = 1 + max(h(root->left),h(root->right));  
    int balance = getBalance(root);  
    if (balance > 1 && getBalance(root->left) >= 0)  
        return rightrotate(root);  
    if (balance > 1 && getBalance(root->left) < 0)  
    {  
        root->left = leftrotate(root->left);  
        return rightrotate(root);  
    }  
    if (balance < -1 && getBalance(root->right) <= 0)  
        return leftrotate(root);    
    if (balance < -1 && getBalance(root->right) > 0)  
    {  
        root->right = rightrotate(root->right);  
        return leftrotate(root);  
    }  
  
    return root;  
} 

void preorder(Node *root)  
{  
    if(root != NULL)  
    {  
        cout << root->key << " ";  
        preorder(root->left);  
        preorder(root->right);  
    }  
}  
    int main()
     {
    Node av;
    Node *root=NULL;
    int ch,val,del;
    do
     {
      cout<<"\n 1.insertion  \n 2.deletion "<<endl;
      cout<<"enter the choice";
      cin>>ch;
      switch(ch)
       {
        case 1:
            cout<<"enter the value to be inserted";
            cin>>val;
            root=insert(root,val);
            preorder(root);
            break;
        case 2:
             cout<<"enter the value to be deleted";
             cin>>del;
             deleteNode(root,del);
             break;    
        default: cout<<"wrong choice"<<endl;
         }
          }while(ch!=0);
     }

